# -*- coding: utf-8 -*-
"""devnagari_characters_recognition_using_neural_networks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YemkATCnYGHeJENfxF1hhFyV9kdUAgCG
"""

# making a copy of csv file from drive to /content
!cp /content/drive/MyDrive/Devnagari_Handwritten_Characters_Train.csv /content

"""###We will use Keras library developed by French Scientist **Francois Chollet**"""

# imprting the required libraries
import pandas as pd
from keras.layers import Input
from keras.layers import Dense  # dense works as both hidden and output layer
from keras.models import Sequential
from keras.utils import to_categorical

# read the csv file in a dataframe
training_data_df = pd.read_csv("/content/Devnagari_Handwritten_Characters_Train.csv")

def image_recognition_dnn():
  dnn = Sequential()   # create a Sequential blackbox: input - 1024 and output - 46
  
  # add layers to the box
  dnn.add(Input(shape=(1024,)))   # adding the input layer
  dnn.add(Dense(units=1024, activation="relu"))   # adding a hidden layer
  dnn.add(Dense(units=46, activation="softmax"))  # adding the output layer

  return dnn

dnn = image_recognition_dnn()   # creating and connecting the dnn

dnn.summary()   # to see the structure of the network

"""###Here, we will use **One Hot Encoding** method to convert the answers column into a vector having 46 vlaues to make it **comparable** to the result vector of the neural network."""

# create list of unique folder names
# print(training_data_df)
diff_folders = set()
# print(training_data_df["image_label"])
for folder_name in training_data_df["image_label"]:
  diff_folders.add(folder_name)
# diff_folders = list(diff_folders)   # convert it to list
# print(diff_folders)
#  replace the folder names with a number
training_data_df["image_label"].replace(to_replace=diff_folders, value=range(0, 46), inplace=True)
# print(training_data_df["image_label"])

print(training_data_df)
# converting the image_label column to a vector
ohe_answers = to_categorical(y=training_data_df["image_label"], num_classes=46)

dnn.compile(loss="categorical_crossentropy", metrics=["accuracy"])

training_data_df.columns

dnn.fit(x=training_data_df.iloc[:, 1:1025], y=ohe_answers,batch_size=1700, epochs=15)

"""1. batch_size = 1700; epochs = 10; accuracy = 94.62%;
2. batch_size = 1700; epochs = 15; accuracy = 99.64%
"""

